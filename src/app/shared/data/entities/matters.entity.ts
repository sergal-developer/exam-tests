export class DataBaseEntity {
    matters: Array<MatterEntity>;

    constructor(matters?: Array<MatterEntity>) {
        this.matters = matters || [];
    }
}

export class MatterEntity {
    id: number;
    value: string;
    icon: string;
    difficultyCollection: Array<DifficultyEntity>;
    enabled: boolean = true;
    difficulty: any;

    constructor(id: number, value: string, icon: string, difficultyCollection: Array<DifficultyEntity>, options?: any) {
        this.id = id;
        this.value = value;
        this.icon = icon;
        this.difficultyCollection = difficultyCollection;

        if (options) {
            const keys = Object.keys(options);
            keys.forEach(k => {
                const newLocal: any = this;
                newLocal[k] = options[k];
            });
        }
    }
}

export class DifficultyEntity {
    id: number;
    value: string;
    icon: string  ='';
    timer: number;
    questions: Array<QuestionEntity>;
    isAutogenerate?: boolean;
    autogenerated?: _AutogeneratedQuestions;

    constructor(id: number, value: string, timer: number, questions: Array<QuestionEntity>, options?: any) {
        this.id = id;
        this.value = value;
        this.timer = timer;
        this.questions = questions;

        if (options) {
            const keys = Object.keys(options);
            keys.forEach(k => {
                const newLocal: any = this;
                newLocal[k] = options[k];
            });
        }
    }
}

export class _AutogeneratedQuestions {
    timer: number = 0;
    type!: TypeOperation;
    minimun: number = 0;
    maximun: number = 0;
    items: number = 0;

    constructor( options?: any ) {
        if (options) {
            const keys = Object.keys(options);
            keys.forEach(k => {
                const newLocal: any = this;
                newLocal[k] = options[k];
            });
        }
    }
}

export class QuestionEntity {
    id: number;
    type: TypeOperation;
    term: string;
    result: any;
    time: number = 0;
    difficulty:number =  1;

    listOptions?: Array<ListOptions>;

    constructor(id: number, type: TypeOperation, term: string, options?: any) {
        this.id = id;
        this.type = type;
        this.term = term;

        if (options) {
            const keys = Object.keys(options);
            keys.forEach(k => {
                const newLocal: any = this;
                newLocal[k] = options[k];
            });
        }
    }
}


export class ListOptions {
    id: number;
    name: string;
    image: string;

    constructor(id: number, name: string, image: string, options?: any) {
        this.id = id;
        this.name = name;
        this.image = image;

        if (options) {
            const keys = Object.keys(options);
            keys.forEach(k => {
                const newLocal: any = this;
                newLocal[k] = options[k];
            });
        }
    }
}

export enum TypeOperation {
    addition = 'addition',
    substract = 'substract',
    multiplication = 'multiplication',
    division = 'division',
    range = 'range',
    hour = 'hour',
    word = 'word',
    logicOperators = 'logicOperators',
    logicSequence = 'logicSequence',
}